{"name":"Libopenlpc81x","tagline":"NXP LPC81x peripheral library","body":"# Libopenlpc81x\r\n\r\nLibopenlpc81x is a peripheral library for NXP LPC81x microcontrollers.\r\nThe LPC81x microcontroller family are based on the ARM Cortex-M0+ core.\r\n\r\nThis library is used with ARM GCC, ARM binutils, and newlib C library.\r\nThey form a toolchain for the LPC81x.\r\n\r\nThis package includes a in-system programming utility (`usart-util`) and some examples.\r\n\r\n## Building libopenlpc81x\r\n\r\nYou need to install the ARM bare-metal (no OS) toolchain ([GNU Tools for ARM Embedded Processors](https://launchpad.net/gcc-arm-embedded)).\r\n\r\nTo build libopenlpc81x, use the following sequence of commands:\r\n```\r\n$ git clone https://github.com/tyoshid/libopenlpc81x.git\r\n$ cd libopenlpc81x\r\n$ make\r\n```\r\nThe `make` step will build the target library (`lib/nxp_lpc/lpc81x/liblpc81x.a`) and the host utility (`tools/nxp_lpc/lpc81x/usart-util/usart-util`).\r\n\r\n## Compiling and Linking\r\n\r\n### Architecture\r\n\r\n\"`-mthumb -mcpu=cortex-m0plus`\"\r\n\r\nThe ARM toolchain supports Cortex-A/R/M architectures.\r\nThese options specify the ARM Cortex-M0+ core.\r\nThe *ARMv6-M* architecture is selected.\r\n\r\n### Header files\r\n\r\n\"`-I`*dir*\"\r\n\r\nThe LPC81x peripheral header files are placed in `include/nxp_lpc/lpc81x`.\r\nThey refer to the common header files in `include`.\r\n\r\n### Library\r\n\r\n\"`-L`*dir*` -llpc81x`\"\r\n\r\n`liblpc81x.a` is generated in `lib/nxp_lpc/lpc81x`.\r\n\r\n### Linker script\r\n\r\n\"`-T `*script*` -nostartfiles`\"\r\n\r\nThe library includes its own startup code (reset handler) and the vector table (`lib/nxp_lpc/lpc81x/vector.c`).\r\nThere are three linker scripts, `lpc810.x`, `lpc811.x`, and `lpc812.x` in `lib/nxp_lpc/lpx81x/ldscripts`.\r\nThe difference between the three is only the size of memory.\r\n\r\nThe linker issues an error message if the code or (global and static) data size is too large, but it can't detect a too large automatic variable (stack overflow).\r\n\r\n---\r\nHere is an example:\r\n```\r\n$ arm-none-eabi-gcc -mthumb -mcpu=cortex-m0plus -Ilibopenlpc81x/include -Ilibopenlpc81x/include/nxp_lpc/lpc81x -o test.elf test.c -Llibopenlpc81x/lib/nxp_lpc/lpc81x -llpc81x -T ldscripts/lpc810.x -nostartfiles\r\n```\r\n\r\n## Downloading\r\n\r\nThe LPC81x always starts from the on-chip boot ROM after reset.\r\nThe boot loader in the boot ROM can execute the ISP command handler or the user application code.\r\n\r\nThe ISP command handler is executed in the following cases:\r\n\r\n* No valid user code is present.\r\n* The ISP entry pin is connected to LOW.\r\n\r\nThe boot loader verifies the vector table entry 7 (0x0000001c).\r\nIf it contain the 2's complement of the checksum of the vector table entries 0 through 6, the boot loader judge that a valid user code is present.\r\n\r\nThe boot loader can automatically determine the baud rate of the serial port (auto-baud).\r\n\r\nThe data stream is in plain binary format, not in uuencode format.\r\n\r\nSee \"*UM10601 LPC81x User manual*, Chapter21: LPC81x Boot ROM\".\r\n\r\n`usart-util` can download a binary image to the LPC81x using the ISP commands.\r\nIt calculates and sets the checksum.\r\nThe host serial device can be specified with `-d`.\r\n\r\nYou can use `objcopy` to generate a raw binary file:\r\n```\r\n$ arm-none-eabi-objcopy -O binary test.elf test.bin\r\n```\r\nHere is an example:\r\n```\r\n# libopenlpc81x/tools/nxp_lpc/lpc81x/usart-util/usart_util -d /dev/ttyUSB1 -D test.bin\r\nISP version 13.4\r\nPID 0x8100  LPC810M021FN8\r\nChecksum = 0xeffff9bb\r\nCRP: NONE\r\nwrote 1220 bytes\r\n#\r\n```\r\n\r\n## Examples\r\n\r\nYou can use `make` to generate the binary file:\r\n```\r\n$ cd examples/nxp_lpc/lpc81x/lpc810m021fn8/miniblink\r\n$ make -s\r\n  miniblink.c\r\n  miniblink.elf\r\n   text        data     bss     dec     hex filename\r\n    972           0       4     976     3d0 miniblink.elf\r\n  miniblink.bin\r\n  miniblink.list\r\n$ \r\n```\r\nYou can say `make flash` to download the binary file.\r\nThe environment variable `USARTUTIL_DEVICE` can be used to specify the host serial device:\r\n```\r\n$ export USARTUTIL_DEVICE=/dev/ttyUSB1\r\n$ su\r\nPassword:\r\n# make -s flash\r\nISP version 13.4\r\nPID 0x8100  LPC810M021FN8\r\nChecksum = 0xeffff9bb\r\nCRP: NONE\r\nwrote 972 bytes\r\n#\r\n```\r\n\r\n## License\r\n\r\n### Hardware\r\n\r\nThe hardware is released under the Creative Commons Attribution-ShareAlike 4.0 International License.\r\n\r\nSee http://creativecommons.org/licenses/by-sa/4.0/.\r\n\r\n### Software\r\n\r\nThe software is released under the terms of GNU General Public License (GPL), version 3 or later.\r\n\r\nSee http://www.gnu.org/licenses/ or COPYING.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}